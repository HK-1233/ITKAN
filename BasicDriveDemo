public class BasicDriveDemo extends LinearOpMode {

  public RobotDrive bot;

  @Override
  public void runOpMode() {
      bot = new RobotDrive();
      bot.init(hardwareMap);


      telemetry.addData("Status", "Initialized");
      telemetry.update();
      waitForStart();

      while (opModeIsActive()) 

  public void runOpMode() {
      bot = new RobotDrive();
      bot.init(hardwareMap);

      telemetry.addData("Status", "Initialized");
      telemetry.update();
      waitForStart();

      while (opModeIsActive())
          double jx = -gamepad1.left_stick_y;

          bot.driveXYW(jx, 0, 0);

          telemetry.addData("Status", "Running");
          telemetry.update();
      }
}

  public void runOpMode() {
    bot = new RobotDrive();
    bot.init(hardwareMap);

    telemetry.addData("Status", "Initialized");
    telemetry.update();
    waitForStart();

    while (opModeIsActive()) {
        double jx = -gamepad1.left_stick_y;
        double jy = -gamepad1.left_stick_x;

        bot.driveXYW(jx, jy, 0);

        telemetry.addData("Status", "Running");
        telemetry.update();
    }
  }

  public void runOpMode() {
      bot = new RobotDrive();
      bot.init(hardwareMap);

      telemetry.addData("Status", "Initialized");
      telemetry.update();
      waitForStart():

      while (opModeIsActive()) {
          double jx = -gamepad1.left_stick_y;
          double jy = -gamepad1.left_stick_x;
          double jw = -gamepad1.right_stick_x;

          bot.driveXYW(jx, jy, jw);

          telemetry.addData("Status", "Running");
          telemetry.update();
      }
  }

  public void runOpMode() {
      bot = new RobotDrive();
      bot.init(hardwareMap);

      telemetry.addData("Status", "Initialized");
      telemetry.update();
      waitForStart();

      while (opModeIsActive()) {
          double jx = -gamepad1.left_stick_y - gamepad1.right_stick_y;
          double jy = -gamepad1.left_stick_x;
          double jw = -gamepad1.right_stick_x;

          bot.driveXYW(jx, jy, jw);

          telemetry.addData("Status", "Running");
          telemetry.update();
      }
  }

  public class RobotDrive {
      public DcMotorEx initDcMotor(HardwareMap hardwareMap,
                                   String name,
                                   DcMotor.Direction dir) {
          DcMotorEx m = hardwareMap.get(DcMotorEx.class, name);
          m.setDirection(dir);
          return m;
                                   }
  }

public class RobotDrive {
  double denom = Math.max(
                     1,
                     (Math.abs(rx)+Math.abs(ry)+Math.abs(rw))
                  );

  double flPower = (rx - ry - rw) / denom;
  double frPower = (rx + ry + rw) / denom;
  double blPower = (rx + ry - rw) / denom;
  double brPower = (rx - ry + rw) / denom;
   
}

